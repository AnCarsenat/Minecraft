peripheral.getMethods("digital_adapter_01")
peripheral.getMethods("digital_adapter_0")
peripheral
peripheral.getMethods("digital_adapter_0")
peripheral
peripheral.getName()
peripheral.getMethods("digital_adapter_0")
peripheral.getMethods("digital_adapter_0",2)
peripheral.getMethods("digital_adapter_0",1)
peripheral.getMethods("digital_adapter_0",100)
exit()
dir
exit()
while true:
while true do
while true do print("hi") end
peripheral.getMethods("digital_adapter_0")
peripheral
print(peripheral.getMethods("digital_adapter_0"))
for i in peripheral.getMethods("digital_adapter_0") do print(i) end
digi_meth = peripheral.getMethods("digital_adapter_0")
print(digi_meth)
print(digi_meth[1])
for i in #digi_meth do print(digi_meth[i] end
for i in #digi_meth do print(digi_meth[i]) end
for i in len(digi_meth) do print(digi_meth[i]) end
for i in digi_meth.len() do print(digi_meth[i]) end
for i,meth in pairs(digi_meth) do print(ùeth) end
for i,meth in pairs(digi_meth) do print(meth) end
for i, method in pairs(peripherals.getMethods("name")) do print(method) end
for i, method in pairs(peripherals.getMethods("name")) do print(method) end*
for i, method in pairs(peripherals.getMethods("name")) do print(method) end
for i, method in pairs(peripheral.getMethods("digital_adapter_0")) do print(method) end
e
exit()
for i, method in pairs(peripheral.getMethods("digital_adapter_0")) do print(method) end
exit
exit()
for i, method in pairs(peripheral.getMethods("digital_adapter_0")) do print(method) end
exit()
for i, method in pairs(peripheral.getMethods("digital_adapter_0")) do print(method) end
lua
local speaker = peripheral.find("speaker")
speaker.playSound("entity.creeper.primed")
local speaker = peripheral.find("speaker")
speaker.playSound("entity.creeper.primed")
speaker = peripheral.find("speaker")
speaker.playSound("entity.creeper.primed")
speaker = peripheral.find("speaker")
speaker.playSound("entity.creeper.primed")
clear
os.run(clear)
os.run("clear")
os("clear")
peripheral.call("digital_adapter_1",)
peripheral.call("digital_adapter_1")
peripheral.wrap("digital_adapter_1")
peripheral.wrap("left")
peripheral.wrap("right")
peripheral.wrap("right").stop()
peripheral.wrap("right").setSpeed(50)
peripheral.wrap("right").setSpeed(256)
peripheral.wrap("").setSpeed(256)
peripheral.wrap("digital_adapter_1")
peripheral.wrap("digital_adapter_1").wra
peripheral.wrap("digital_adapter_1").wrap("left")
peripheral.wrap("digital_adapter_1")
exit()
peripheral.wrap("digital_adapter_1")
peripheral.wrap("digital_adapter_1").
dir
exit()
peripheral.wrap("digital_adapter_0")
peripheral.wrap("digital_adapter_0").getTargetSpeed()
peripheral.wrap("digital_adapter_0").getTargetSpeed("left")
peripheral.wrap("digital_adapter_0").getTargetSpeed("right")
peripheral.wrap("digital_adapter_0").getTargetSpeed("front")
peripheral.wrap("digital_adapter_0").getTargetSpeed("back")
peripheral.wrap("digital_adapter_0").getTargetSpeed("top")
peripheral.wrap("digital_adapter_0").getTargetSpeed("bottom")
peripheral.wrap("digital_adapter_0").getTargetSpeed("right")
peripheral.wrap("digital_adapter_0").getTargetSpeed("left")
peripheral.wrap("digital_adapter_0").getTargetSpeed("top")
peripheral.wrap("digital_adapter_2").getTargetSpeed("left")
peripheral.wrap("digital_adapter_2").getTargetSpeed("top")
clear
clear()
peripheral.wrap("digital_adapter_2").getTargetSpeed("top")
peripheral.wrap("digital_adapter_2").getKineticSpeed("top")
peripheral.wrap("digital_adapter_2").print("top")
local da = peripheral.wrap("left")
da.print("Text on first line")
local da = peripheral.wrap("left")
local da = peripheral.wrap("")
local da = peripheral.wrap("digital_adapter_2")
da.print("Text on first line")
local da = peripheral.wrap("digital_adapter_2")
da
local da = peripheral.wrap("digital_adapter_2")
peripheral.getNames()
local da = peripheral.wrap("digital_adapter_2")
da
da = peripheral.wrap("digital_adapter_2")
da
da.print("Text on first line")
da
da.print("Text on first line")
da.setLine(1)
da.print("Text on first line")
da.setLine(1)
da.setLine(2)
da.print("Text on first line")
da = peripheral.wrap("digital_adapter_2")
da
da.getBearingAngle(
da.getBearingAngle("top")
da = peripheral.wrap("digital_adapter_2")
da.getTargetSpeed()
da.getTargetSpeed(13)
da.getTargetSpeed("13")
da.getTargetSpeed("top")
da.setTargetSpeed("top",20)
da.getBearingAngle(
da.getBearingAngle()
da.getBearingAngle("top")
colors.black
e
clear
exit
exit()
peripheral.getNames
peripheral.getNames()
peripheral.wrap("electric_motor_0")
peripheral.wrap("electric_motor_0").rotate(90)
peripheral.wrap("electric_motor_0").stop()
peripheral.wrap("electric_motor_0").rotate(90)
get_redstone = function() redstone end
local running = true
while running do if redstone.getInput()
redstone.getInput()
redstone.getInput("top")
redstone.getInput("front")
while running do if not redstone.getInput("front") then continue else runnning = false end
while running do if not redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(90) else runnning = false end
while running do if not redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(90) else runnning = false end end
while running do if redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(90) else runnning = false end end
running = true
while running do if redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(90) else runnning = false end end
while running do if redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(45) else runnning = false end end
runnning = true
while running do if redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(45) else runnning = false end end
runnning = true
while running do if redstone.getInput("front") then peripheral.wrap("electric_motor_0").rotate(45) else runnning = false end end
redstone.setAnalogOutput("right",1)
redstone.setAnalogOutput("right",2)
redstone.setAnalogOutput("right",10)
redstone.getOutput()
redstone.getOutput("right")
redstone.setAnalogOutput("right",0)
redstone.getOutput("right")
redstone.setAnalogOutput("left",2)
local test = peripheral.wrap(create_target_0)
local test = peripheral.wrap("create_target_0")
test.getMethods()
local test = peripheral.wrap("create_target_0")
test
local test = peripheral.wrap("create_target_0")
test
local test = peripheral.wrap("create_target_0")
test
local test = peripheral.wrap("redrouter_0")
test
test.
test = peripheral.wrap("redrouter_0")
test
local test = peripheral.wrap("create_target_0")
test
local test = peripheral.wrap("create_target_1")
test
peripheral.wrap("create_target_1")
test = peripheral.wrap("create_target_1")
test
test = peripheral.wrap("redrouter_1")
test
test = peripheral.wrap("redrouter_1")
test
test = peripheral.wrap("create_source_0")
test
test = peripheral.wrap("animatronic_0")
test
test.getStoredHeadRot()
test.setHeadRot(45,45,4()
test.setHeadRot(45,45,45)
test.setHeadRot((45,45,45))
test.setHeadRot(45,90,45)
test
test = peripheral.wrap("furnace_0")
test
test = peripheral.wrap("furnace_0")
test
peripheral.wrap(modem_0)
local modem = peripheral.wrap("modem_0")
modem
modem = peripheral.wrap("modem_0")
local modem = peripheral.wrap("modem_0")
modem = peripheral.wrap("modem_0")
modem
local modem = peripheral.wrap("modem_0")
modem
modem.transmit()
modem.transmit(1)
modem.transmit(1,2)
modem.transmit(1,2,"Hi")
webget local
webget local:400
clear
exit()
peripheral.getNames()
peripheral.wrap(Create_SequencedGearshift_2")
peripheral.wrap("Create_SequencedGearshift_2")
os.run("wget")
os.loadAPI("wget")
http.request("https://github.com/SquidDev-CC/mbs/blob/master/mbs.lua")
